const article = {
  "_id": "fe4995ba645c604c0000b59e6b44aa1e",
  "_openid": "dbee9976b3c14448a06f2006a4795cf2",
  "classes": "Angular 学习笔记",
  "content": ">本文转载于<a href=\"https://www.bilibili.com/video/BV1BY411x7h1\" target=\"_blank\" rel=\"noreferrer noopener\">Angular 终极教程</a>。\n\n## HttpClientModule\n\n该模块用于发送 Http 请求，用于发送请求的方法都返回 Observable 对象。\n\n### 快速开始\n\n1. 引入 HttpClientModule 模块\n\n   ```javascript\n   // app.module.ts\n   import { httpClientModule } from '@angular/common/http';\n   imports: [\n     httpClientModule\n   ]\n   ```\n\n2. 注入 HttpClient 服务实例对象，用于发送请求\n\n   ```javascript\n   // app.component.ts\n   import { HttpClient } from '@angular/common/http';\n   \n   export class AppComponent {\n   \tconstructor(private http: HttpClient) {}\n   }\n   ```\n\n3. 发送请求\n\n   ```javascript\n   import { HttpClient } from \"@angular/common/http\"\n   \n   export class AppComponent implements OnInit {\n     constructor(private http: HttpClient) {}\n     ngOnInit() {\n       this.getUsers().subscribe(console.log)\n     }\n     getUsers() {\n       return this.http.get(\"https://jsonplaceholder.typicode.com/users\")\n     }\n   }\n   ```\n\n### 请求方法\n\n```javascript\nthis.http.get(url [, options]);\nthis.http.post(url, data [, options]);\nthis.http.delete(url [, options]);\nthis.http.put(url, data [, options]);\n```\n\n```javascript\nthis.http.get<Post[]>('/getAllPosts')\n  .subscribe(response => console.log(response))\n```\n\n### 请求参数\n\n1. HttpParams 类\n\n   ```javascript\n   export declare class HttpParams {\n       constructor(options?: HttpParamsOptions);\n       has(param: string): boolean;\n       get(param: string): string | null;\n       getAll(param: string): string[] | null;\n       keys(): string[];\n       append(param: string, value: string): HttpParams;\n       set(param: string, value: string): HttpParams;\n       delete(param: string, value?: string): HttpParams;\n       toString(): string;\n   }\n   ```\n\n2. HttpParamsOptions 接口\n\n   ```javascript\n   declare interface HttpParamsOptions {\n       fromString?: string;\n       fromObject?: {\n           [param: string]: string | ReadonlyArray<string>;\n       };\n       encoder?: HttpParameterCodec;\n   }\n   ```\n\n3. 使用示例\n\n   ```javascript\n   import { HttpParams } from '@angular/common/http';\n   \n   let params = new HttpParams({ fromObject: {name: \"zhangsan\", age: \"20\"}})\n   params = params.append(\"sex\", \"male\")\n   let params = new HttpParams({ fromString: \"name=zhangsan&age=20\"})\n   ```\n\n\n### 请求头\n\n请求头字段的创建需要使用 HttpHeaders 类，在类实例对象下面有各种操作请求头的方法。\n\n```javascript\nexport declare class HttpHeaders {\n    constructor(headers?: string | {\n        [name: string]: string | string[];\n    });\n    has(name: string): boolean;\n    get(name: string): string | null;\n    keys(): string[];\n    getAll(name: string): string[] | null;\n    append(name: string, value: string | string[]): HttpHeaders;\n    set(name: string, value: string | string[]): HttpHeaders;\n    delete(name: string, value?: string | string[]): HttpHeaders;\n}\n```\n\n```javascript\nlet headers = new HttpHeaders({ test: \"Hello\" })\n```\n\n### 响应内容\n\n```javascript\ndeclare type HttpObserve = 'body' | 'response';\n// response 读取完整响应体\n// body 读取服务器端返回的数据\n```\n\n```javascript\nthis.http.get(\n  \"https://jsonplaceholder.typicode.com/users\", \n  { observe: \"body\" }\n).subscribe(console.log)\n```\n\n### 拦截器\n\n拦截器是 Angular 应用中全局捕获和修改 HTTP 请求和响应的方式。（Token、Error）\n\n拦截器将只拦截使用 HttpClientModule 模块发出的请求。\n\n`ng g interceptor <name>`\n\n![](https://img.lzxjack.top:99/202305110109478.png)\n\n![](https://img.lzxjack.top:99/202305110109218.png)\n\n#### 请求拦截\n\n```javascript\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor() {}\n\t// 拦截方法\n  intercept(\n  \t// unknown 指定请求体 (body) 的类型\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n     // unknown 指定响应内容 (body) 的类型\n  ): Observable<HttpEvent<unknown>> {\n    // 克隆并修改请求头\n    const req = request.clone({\n      setHeaders: {\n        Authorization: \"Bearer xxxxxxx\"\n      }\n    })\n    // 通过回调函数将修改后的请求头回传给应用\n    return next.handle(req)\n  }\n}\n```\n\n#### 响应拦截\n\n```javascript\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor() {}\n\t// 拦截方法\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<any> {\n    return next.handle(request).pipe(\n      retry(2),\n      catchError((error: HttpErrorResponse) => throwError(error))\n    )\n  }\n}\n```\n\n#### 拦截器注入\n\n```javascript\nimport { AuthInterceptor } from \"./auth.interceptor\"\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\"\n\n@NgModule({\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ]\n})\n```\n\n### Angular Proxy\n\n1. 在项目的根目录下创建  proxy.conf.json 文件并加入如下代码\n\n   ```json\n   {\n    \t\"/api/*\": {\n       \"target\": \"http://localhost:3070\",\n       \"secure\": false,\n       \"changeOrigin\": true\n     }\n   }\n   ```\n\n   1. /api/*：在应用中发出的以 /api 开头的请求走此代理\n   2. target：服务器端 URL\n   3. secure：如果服务器端 URL 的协议是 https，此项需要为 true\n   4. changeOrigin：如果服务器端不是 localhost， 此项需要为 true\n\n2. 指定 proxy 配置文件 (方式一) \n\n   ```javascript\n   \"scripts\": {\n     \"start\": \"ng serve --proxy-config proxy.conf.json\",\n   }\n   ```\n\n3. 指定 proxy 配置文件 (方式二)\n\n   ```json\n   \"serve\": {\n     \"options\": {\n       \"proxyConfig\": \"proxy.conf.json\"\n     },\n   ```\n\n## 动画\n\n![](https://img.lzxjack.top:99/202305110109469.gif)\n\n### 状态\n\n#### 什么是状态\n\n状态表示的是要进行运动的元素在运动的不同时期所呈现的样式。\n\n![](https://img.lzxjack.top:99/202305110109377.png)\n\n#### 状态的种类\n\n在 Angular 中，有三种类型的状态，分别为：`void`、`*`、`custom`\n\n![](https://img.lzxjack.top:99/202305110121419.png)\n\nvoid：当元素在内存中创建好但尚未被添加到 DOM 中或将元素从 DOM 中删除时会发生此状态\n\n\\*：元素被插入到 DOM 树之后的状态，或者是已经在DOM树中的元素的状态，也叫默认状态\n\ncustom：自定义状态，元素默认就在页面之中，从一个状态运动到另一个状态，比如面板的折叠和展开。\n\n#### 进出场动画\n\n进场动画是指元素被创建后以动画的形式出现在用户面前，进场动画的状态用 `void => *` 表示，别名为 `:enter`\n\n![](https://img.lzxjack.top:99/202305110121969.png)\n\n出场动画是指元素在被删除前执行的一段告别动画，出场动画的状态用 `* => void`，别名为 `:leave`\n\n![](https://img.lzxjack.top:99/202305110121785.png)\n\n### 快速上手\n\n1. 在使用动画功能之前，需要引入动画模块，即 `BrowserAnimationsModule`\n\n   ```javascript\n   import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\"\n   \n   @NgModule({\n     imports: [BrowserAnimationsModule],\n   })\n   export class AppModule {}\n   ```\n\n2. 默认代码解析，todo 之删除任务和添加任务\n\n   ```html\n   <!-- 在 index.html 文件中引入 bootstrap.min.css -->\n   <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" />\n   ```\n\n   ```html\n   <div class=\"container\">\n     <h2>Todos</h2>\n     <div class=\"form-group\">\n       <input (keyup.enter)=\"addItem(input)\" #input type=\"text\" class=\"form-control\" placeholder=\"add todos\" />\n     </div>\n     <ul class=\"list-group\">\n       <li (click)=\"removeItem(i)\" *ngFor=\"let item of todos; let i = index\" class=\"list-group-item\">\n         {{ item }}\n       </li>\n     </ul>\n   </div>\n   ```\n\n   ```javascript\n   import { Component } from \"@angular/core\"\n   \n   @Component({\n     selector: \"app-root\",\n     templateUrl: \"./app.component.html\",\n     styles: []\n   })\n   export class AppComponent {\n     // todo 列表\n     todos: string[] = [\"Learn Angular\", \"Learn RxJS\", \"Learn NgRx\"]\n   \t// 添加 todo\n     addItem(input: HTMLInputElement) {\n       this.todos.push(input.value)\n       input.value = \"\"\n     }\n   \t// 删除 todo\n     removeItem(index: number) {\n       this.todos.splice(index, 1)\n     }\n   }\n   ```\n\n3. 创建动画\n\n   1. trigger 方法用于创建动画，指定动画名称\n   2. transition 方法用于指定动画的运动状态，出场动画或者入场动画，或者自定义状态动画。\n   3. style 方法用于设置元素在不同的状态下所对应的样式\n   4. animate 方法用于设置运动参数，比如动画运动时间，延迟事件，运动形式\n\n   ```javascript\n   @Component({\n     animations: [\n       // 创建动画, 动画名称为 slide\n       trigger(\"slide\", [\n         // 指定入场动画 注意: 字符串两边不能有空格, 箭头两边可以有也可以没有空格\n         // void => * 可以替换为 :enter\n         transition(\"void => *\", [\n           // 指定元素未入场前的样式\n           style({ opacity: 0, transform: \"translateY(40px)\" }),\n           // 指定元素入场后的样式及运动参数\n           animate(250, style({ opacity: 1, transform: \"translateY(0)\" }))\n         ]),\n         // 指定出场动画\n         // * => void 可以替换为 :leave\n         transition(\"* => void\", [\n           // 指定元素出场后的样式和运动参数\n           animate(600, style({ opacity: 0, transform: \"translateX(100%)\" }))\n         ])\n       ])\n     ]\n   })\n   ```\n\n   ```html\n   <li @slide></li>\n   ```\n   \n   注意：入场动画中可以不指定元素的默认状态，Angular 会将 void 状态清空作为默认状态\n   \n   ```javascript\n   trigger(\"slide\", [\n     transition(\":enter\", [\n       style({ opacity: 0, transform: \"translateY(40px)\" }),\n       animate(250)\n     ]),\n     transition(\":leave\", [\n    \t\tanimate(600, style({ opacity: 0, transform: \"translateX(100%)\" }))\n     ])\n   ])\n   ```\n   \n   注意：要设置动画的运动参数，需要将 animate 方法的一个参数更改为字符串类型\n   \n   ```javascript\n   // 动画执行总时间 延迟时间 (可选) 运动形式 (可选)\n   animate(\"600ms 1s ease-out\", style({ opacity: 0, transform: \"translateX(100%)\" }))\n   ```\n\n### 关键帧动画\n\n关键帧动画使用 `keyframes` 方法定义\n\n```javascript\ntransition(\":leave\", [\n  animate(\n    600,\n    keyframes([\n      style({ offset: 0.3, transform: \"translateX(-80px)\" }),\n      style({ offset: 1, transform: \"translateX(100%)\" })\n    ])\n  )\n])\n```\n\n### 动画回调\n\nAngular 提供了和动画相关的两个回调函数，分别为动画开始执行时和动画执行完成后\n\n```html\n<li @slide (@slide.start)=\"start($event)\" (@slide.done)=\"done($event)\"></li>\n```\n\n```javascript\nimport { AnimationEvent } from \"@angular/animations\"\n\nstart(event: AnimationEvent) {\n  console.log(event)\n}\ndone(event: AnimationEvent) {\n  console.log(event)\n}\n```\n\n### 创建可重用动画\n\n1. 将动画的定义放置在单独的文件中，方便多组件调用。\n\n   ```javascript\n   import { animate, keyframes, style, transition, trigger } from \"@angular/animations\"\n   \n   export const slide = trigger(\"slide\", [\n     transition(\":enter\", [\n       style({ opacity: 0, transform: \"translateY(40px)\" }),\n       animate(250)\n     ]),\n     transition(\":leave\", [\n       animate(\n         600,\n         keyframes([\n           style({ offset: 0.3, transform: \"translateX(-80px)\" }),\n           style({ offset: 1, transform: \"translateX(100%)\" })\n         ])\n       )\n     ])\n   ])\n   ```\n\n   ```javascript\n   import { slide } from \"./animations\"\n   \n   @Component({\n     animations: [slide]\n   })\n   ```\n\n2. 抽取具体的动画定义，方便多动画调用。\n\n   ```javascript\n   import {animate, animation, keyframes, style, transition, trigger, useAnimation} from \"@angular/animations\"\n   \n   export const slideInUp = animation([\n     style({ opacity: 0, transform: \"translateY(40px)\" }),\n     animate(250)\n   ])\n   \n   export const slideOutLeft = animation([\n     animate(\n       600,\n       keyframes([\n         style({ offset: 0.3, transform: \"translateX(-80px)\" }),\n         style({ offset: 1, transform: \"translateX(100%)\" })\n       ])\n     )\n   ])\n   \n   export const slide = trigger(\"slide\", [\n     transition(\":enter\", useAnimation(slideInUp)),\n     transition(\":leave\", useAnimation(slideOutLeft))\n   ])\n   ```\n\n3. 调用动画时传递运动总时间，延迟时间，运动形式\n\n   ```javascript\n   export const slideInUp = animation(\n     [\n       style({ opacity: 0, transform: \"translateY(40px)\" }),\n       animate(\"{{ duration }} {{ delay }} {{ easing }}\")\n     ],\n     {\n       params: {\n         duration: \"400ms\",\n         delay: \"0s\",\n         easing: \"ease-out\"\n       }\n     }\n   )\n   ```\n\n   ```javascript\n   transition(\":enter\", useAnimation(slideInUp, {params: {delay: \"1s\"}}))\n   ```\n\n\n### 查询元素执行动画\n\nAngular 中提供了 `query` 方法查找元素并为元素创建动画\n\n```javascript\nimport { slide } from \"./animations\"\n\nanimations: [\n  slide,\n  trigger(\"todoAnimations\", [\n    transition(\":enter\", [\n      query(\"h2\", [\n        style({ transform: \"translateY(-30px)\" }),\n        animate(300)\n      ]),\n      // 查询子级动画 使其执行\n      query(\"@slide\", animateChild())\n    ])\n  ])\n]\n```\n\n```html\n<div class=\"container\" @todoAnimations>\n  <h2>Todos</h2>\n  <ul class=\"list-group\">\n    <li\n      @slide\n      (click)=\"removeItem(i)\"\n      *ngFor=\"let item of todos; let i = index\"\n      class=\"list-group-item\"\n    >\n      {{ item }}\n    </li>\n  </ul>\n</div>\n```\n\n默认情况下，父级动画和子级动画按照顺序执行，先执行父级动画，再执行子级动画，可以使用  `group` 方法让其并行\n\n```javascript\ntrigger(\"todoAnimations\", [\n  transition(\":enter\", [\n    group([\n      query(\"h2\", [\n        style({ transform: \"translateY(-30px)\" }),\n        animate(300)\n      ]),\n      query(\"@slide\", animateChild())\n    ])\n  ])\n])\n```\n\n### 交错动画\n\nAngular 提供了 stagger 方法，在多个元素同时执行同一个动画时，让每个元素动画的执行依次延迟。\n\n```javascript\ntransition(\":enter\", [\n  group([\n    query(\"h2\", [\n      style({ transform: \"translateY(-30px)\" }),\n      animate(300)\n    ]),\n    query(\"@slide\", stagger(200, animateChild()))\n  ])\n])\n```\n\n注意：stagger 方法只能在 query 方法内部使用\n\n### 自定义状态动画\n\nAngular 提供了 `state` 方法用于定义状态。\n\n![](https://img.lzxjack.top:99/202305110121241.gif)\n\n1. 默认代码解析\n\n   ```html\n   <div class=\"container\">\n     <div class=\"panel panel-default\">\n       <div class=\"panel-heading\" (click)=\"toggle()\">\n         一套框架, 多种平台, 移动端 & 桌面端\n       </div>\n       <div class=\"panel-body\">\n         <p>\n           使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的\n           IDE 中获得针对 Angular\n           的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。\n         </p>\n         <p>\n           从原型到全球部署，Angular 都能带给你支撑 Google\n           大型应用的那些高延展性基础设施与技术。\n         </p>\n         <p>\n           通过 Web Worker 和服务端渲染，达到在如今(以及未来）的 Web\n           平台上所能达到的最高速度。 Angular 让你有效掌控可伸缩性。基于\n           RxJS、Immutable.js 和其它推送模型，能适应海量数据需求。\n         </p>\n         <p>\n           学会用 Angular\n           构建应用，然后把这些代码和能力复用在多种多种不同平台的应用上 ——\n           Web、移动 Web、移动应用、原生应用和桌面原生应用。\n         </p>\n       </div>\n     </div>\n   </div>\n   <style>\n     .container {\n       margin-top: 100px;\n     }\n     .panel-heading {\n       cursor: pointer;\n     }\n   </style>\n   ```\n\n   ```javascript\n   import { Component } from \"@angular/core\"\n   \n   @Component({\n     selector: \"app-root\",\n     templateUrl: \"./app.component.html\",\n     styles: []\n   })\n   export class AppComponent {\n     isExpended: boolean = false\n     toggle() {\n       this.isExpended = !this.isExpended\n     }\n   }\n   ```\n\n2. 创建动画\n\n   ```javascript\n   trigger(\"expandCollapse\", [\n     // 使用 state 方法定义折叠状态元素对应的样式\n     state(\n       \"collapsed\",\n       style({\n         height: 0,\n         overflow: \"hidden\",\n         paddingTop: 0,\n         paddingBottom: 0\n       })\n     ),\n     // 使用 state 方法定义展开状态元素对应的样式\n     state(\"expanded\", style({ height: \"*\", overflow: \"auto\" })),\n     // 定义展开动画\n     transition(\"collapsed => expanded\", animate(\"400ms ease-out\")),\n     // 定义折叠动画\n     transition(\"expanded => collapsed\", animate(\"400ms ease-in\"))\n   ])\n   ```\n\n   ```html\n   <div class=\"panel-body\" [@expandCollapse]=\"isExpended ? 'expanded' : 'collapsed'\"></div>\n   ```\n\n### 路由动画\n\n![](https://img.lzxjack.top:99/202305110121308.gif)\n\n1. 为路由添加状态标识，此标识即为路由执行动画时的自定义状态\n\n   ```javascript\n   const routes: Routes = [\n     {\n       path: \"\",\n       component: HomeComponent,\n       pathMatch: \"full\",\n       data: {\n         animation: \"one\" \n       }\n     },\n     {\n       path: \"about\",\n       component: AboutComponent,\n       data: {\n         animation: \"two\"\n       }\n     },\n     {\n       path: \"news\",\n       component: NewsComponent,\n       data: {\n         animation: \"three\"\n       }\n     }\n   ]\n   ```\n\n2. 通过路由插座对象获取路由状态标识，并将标识传递给动画的调用者，让动画执行当前要执行的状态是什么\n\n   ``` html\n   <div class=\"routerContainer\" [@routerAnimations]=\"prepareRoute(outlet)\">\n     <router-outlet #outlet=\"outlet\"></router-outlet>\n   </div>\n   ```\n\n   ```javascript\n   import { RouterOutlet } from \"@angular/router\"\n   \n   export class AppComponent {\n     prepareRoute(outlet: RouterOutlet) {\n       return (\n         outlet &&\n         outlet.activatedRouteData &&\n         outlet.activatedRouteData.animation\n       )\n     }\n   }\n   ```\n\n3. 将 routerContainer 设置为相对定位，将它的直接一级子元素设置成绝对定位\n\n   ```css\n   /* styles.css */\n   .routerContainer {\n     position: relative;\n   }\n   \n   .routerContainer > * {\n     position: absolute;\n     left: 0;\n     top: 0;\n     width: 100%;\n   }\n   ```\n\n4. 创建动画\n\n   ```javascript\n   trigger(\"routerAnimations\", [\n     transition(\"one => two, one => three, two => three\", [\n       query(\":enter\", style({ transform: \"translateX(100%)\", opacity: 0 })),\n       group([\n         query(\n           \":enter\",\n           animate(\n             \"0.4s ease-in\",\n             style({ transform: \"translateX(0)\", opacity: 1 })\n           )\n         ),\n         query(\n           \":leave\",\n           animate(\n             \"0.4s ease-out\",\n             style({\n               transform: \"translateX(-100%)\",\n               opacity: 0\n             })\n           )\n         )\n       ])\n     ]),\n     transition(\"three => two, three => one, two => one\", [\n       query(\n         \":enter\",\n         style({ transform: \"translateX(-100%)\", opacity: 0 })\n       ),\n       group([\n         query(\n           \":enter\",\n           animate(\n             \"0.4s ease-in\",\n             style({ transform: \"translateX(0)\", opacity: 1 })\n           )\n         ),\n         query(\n           \":leave\",\n           animate(\n             \"0.4s ease-out\",\n             style({\n               transform: \"translateX(100%)\",\n               opacity: 0\n             })\n           )\n         )\n       ])\n     ])\n   ])\n   ```\n\n\n",
  "date": 1683775540000,
  "post": true,
  "tags": [
      "Angular"
  ],
  "title": "Angular 学习笔记（Http、动画）",
  "titleEng": "study-angular-4",
  "url": "https://lzxjack.top/post?title=study-angular-4"
}
export default article;